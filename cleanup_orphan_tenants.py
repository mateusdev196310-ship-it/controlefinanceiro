#!/usr/bin/env python
import os
import sys
import django
from django.db import connection

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'financeiro.settings')
django.setup()

from financas.models import CustomUser, Tenant
from django.contrib.auth.hashers import make_password

def cleanup_orphan_tenants():
    """
    Remove tenants √≥rf√£os (sem usu√°rios) e cria usu√°rio admin se necess√°rio
    """
    print("üßπ Limpando tenants √≥rf√£os...")
    
    try:
        # 1. Identificar tenants √≥rf√£os
        tenants_orfaos = Tenant.objects.filter(usuarios__isnull=True)
        
        print(f"\nüéØ Tenants √≥rf√£os encontrados: {tenants_orfaos.count()}")
        
        if tenants_orfaos.count() > 0:
            for tenant in tenants_orfaos:
                print(f"  - ID: {tenant.id}, C√≥digo: '{tenant.codigo}'")
            
            # Confirmar remo√ß√£o
            confirmacao = input("\n‚ö†Ô∏è  Confirma a remo√ß√£o destes tenants √≥rf√£os? (digite 'SIM' para confirmar): ")
            if confirmacao == 'SIM':
                # Remover dados relacionados aos tenants √≥rf√£os
                with connection.cursor() as cursor:
                    for tenant in tenants_orfaos:
                        print(f"  üóëÔ∏è  Removendo dados do tenant √≥rf√£o {tenant.codigo} (ID: {tenant.id})")
                        
                        # Remover dados das tabelas que possuem tenant_id
                        cursor.execute("DELETE FROM financas_transacao WHERE tenant_id = %s", [tenant.id])
                        cursor.execute("DELETE FROM financas_despesaparcelada WHERE tenant_id = %s", [tenant.id])
                        cursor.execute("DELETE FROM financas_conta WHERE tenant_id = %s", [tenant.id])
                        cursor.execute("DELETE FROM financas_categoria WHERE tenant_id = %s", [tenant.id])
                        
                        # Nota: FechamentoMensal e ConfiguracaoFechamento n√£o possuem tenant_id
                        # Eles s√£o relacionados atrav√©s da Conta, que j√° foi removida acima
                
                # Remover os tenants √≥rf√£os
                tenants_removidos = tenants_orfaos.count()
                tenants_orfaos.delete()
                print(f"  ‚úÖ {tenants_removidos} tenants √≥rf√£os removidos com sucesso")
            else:
                print("‚ùå Remo√ß√£o de tenants cancelada.")
        else:
            print("‚úÖ Nenhum tenant √≥rf√£o encontrado.")
        
        # 2. Verificar se existe usu√°rio admin
        print("\nüë§ Verificando usu√°rio admin...")
        
        try:
            admin_user = CustomUser.objects.get(username='admin')
            print(f"‚úÖ Usu√°rio admin j√° existe (ID: {admin_user.id})")
        except CustomUser.DoesNotExist:
            print("‚ö†Ô∏è  Usu√°rio admin n√£o encontrado.")
            criar_admin = input("Deseja criar o usu√°rio admin? (digite 'SIM' para confirmar): ")
            
            if criar_admin == 'SIM':
                # Criar usu√°rio admin
                admin_user = CustomUser.objects.create(
                    username='admin',
                    email='admin@sistema.com',
                    first_name='Administrador',
                    last_name='Sistema',
                    is_staff=True,
                    is_superuser=True,
                    is_active=True,
                    password=make_password('admin123'),  # Senha padr√£o
                    tipo_pessoa='fisica',
                    cpf='00000000000'
                )
                
                print(f"‚úÖ Usu√°rio admin criado com sucesso (ID: {admin_user.id})")
                print("üìù Credenciais: admin / admin123")
                print("‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!")
        
        # 3. Relat√≥rio final
        print("\nüìä RELAT√ìRIO FINAL:")
        print("=" * 40)
        
        # Usu√°rios restantes
        usuarios = CustomUser.objects.all().order_by('username')
        print(f"üë• Usu√°rios no sistema: {usuarios.count()}")
        for user in usuarios:
            print(f"  - {user.username} (Superuser: {user.is_superuser})")
        
        # Tenants restantes
        tenants = Tenant.objects.all().order_by('codigo')
        print(f"\nüè¢ Tenants no sistema: {tenants.count()}")
        for tenant in tenants:
            usuarios_tenant = tenant.usuarios.all()
            usuarios_nomes = ', '.join([u.username for u in usuarios_tenant]) if usuarios_tenant.exists() else 'Nenhum'
            print(f"  - {tenant.codigo} (Usu√°rios: {usuarios_nomes})")
        
        print("\nüéâ Limpeza conclu√≠da!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a limpeza: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    cleanup_orphan_tenants()