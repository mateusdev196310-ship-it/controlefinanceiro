#!/usr/bin/env python
import os
import sys
import django
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'financeiro.settings')
django.setup()

from financas.models import CustomUser, Tenant, Categoria, Transacao, Conta, DespesaParcelada
from django.db.models import Sum
from django.db import transaction

def test_exclusao_conta_com_transacoes():
    """
    Testa o que acontece quando uma conta com transa√ß√µes √© exclu√≠da
    """
    print("üß™ TESTE: Exclus√£o de Conta com Transa√ß√µes")
    print("=" * 50)
    
    try:
        # 1. Buscar um usu√°rio existente
        user = CustomUser.objects.filter(username='mateus').first()
        if not user:
            print("‚ùå Usu√°rio 'mateus' n√£o encontrado")
            return
        
        tenant = user.tenants.first()
        if not tenant:
            print("‚ùå Tenant n√£o encontrado para o usu√°rio")
            return
        
        print(f"üë§ Usu√°rio: {user.username}")
        print(f"üè¢ Tenant: {tenant.codigo}")
        
        # 2. Criar uma conta de teste
        with transaction.atomic():
            conta_teste = Conta.objects.create(
                nome="Conta Teste Exclus√£o",
                saldo=Decimal('1000.00'),
                cor="#ff0000",
                tipo="simples",
                tenant_id=tenant.id
            )
            print(f"\nüí≥ Conta criada: {conta_teste.nome} (ID: {conta_teste.id})")
            print(f"üí∞ Saldo inicial: R$ {conta_teste.saldo}")
        
        # 3. Buscar ou criar categoria
        categoria = Categoria.objects.filter(tenant_id=tenant.id).first()
        if not categoria:
            categoria = Categoria.objects.create(
                nome="Categoria Teste",
                cor="#00ff00",
                tipo="ambos",
                tenant_id=tenant.id
            )
        
        # 4. Criar algumas transa√ß√µes na conta
        transacoes_criadas = []
        
        # Receita
        receita = Transacao.objects.create(
            descricao="Receita Teste",
            valor=Decimal('500.00'),
            categoria=categoria,
            tipo="receita",
            conta=conta_teste,
            tenant_id=tenant.id
        )
        transacoes_criadas.append(receita)
        
        # Despesa
        despesa = Transacao.objects.create(
            descricao="Despesa Teste",
            valor=Decimal('200.00'),
            categoria=categoria,
            tipo="despesa",
            conta=conta_teste,
            tenant_id=tenant.id
        )
        transacoes_criadas.append(despesa)
        
        print(f"\nüìä Transa√ß√µes criadas: {len(transacoes_criadas)}")
        for t in transacoes_criadas:
            print(f"  ‚Ä¢ {t.descricao}: R$ {t.valor} ({t.tipo})")
        
        # 5. Criar mais uma transa√ß√£o para ter mais dados
        transferencia = Transacao.objects.create(
            descricao="Transfer√™ncia Teste",
            valor=Decimal('100.00'),
            categoria=categoria,
            tipo="despesa",
            conta=conta_teste,
            tenant_id=tenant.id
        )
        transacoes_criadas.append(transferencia)
        
        print(f"  ‚Ä¢ {transferencia.descricao}: R$ {transferencia.valor} ({transferencia.tipo})")
        
        # 6. Verificar estado antes da exclus√£o
        print("\nüìã ESTADO ANTES DA EXCLUS√ÉO:")
        print("=" * 30)
        
        total_transacoes = Transacao.objects.filter(conta=conta_teste).count()
        total_receitas = Transacao.objects.filter(
            conta=conta_teste, tipo='receita'
        ).aggregate(total=Sum('valor'))['total'] or Decimal('0.00')
        
        total_despesas = Transacao.objects.filter(
            conta=conta_teste, tipo='despesa'
        ).aggregate(total=Sum('valor'))['total'] or Decimal('0.00')
        
        print(f"üí≥ Conta: {conta_teste.nome}")
        print(f"üí∞ Saldo: R$ {conta_teste.saldo}")
        print(f"üìä Total de transa√ß√µes: {total_transacoes}")
        print(f"üìà Total receitas: R$ {total_receitas}")
        print(f"üìâ Total despesas: R$ {total_despesas}")
        print(f"üí≥ Despesas parceladas: {DespesaParcelada.objects.filter(conta=conta_teste).count()}")
        
        # 7. Tentar excluir a conta
        print("\nüóëÔ∏è  TENTANDO EXCLUIR A CONTA...")
        print("=" * 30)
        
        conta_id = conta_teste.id
        conta_nome = conta_teste.nome
        
        try:
            # Simular a exclus√£o como feita na view
            conta_teste.delete()
            print(f"‚úÖ Conta '{conta_nome}' (ID: {conta_id}) exclu√≠da com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro ao excluir conta: {e}")
            return
        
        # 8. Verificar o que aconteceu ap√≥s a exclus√£o
        print("\nüìã ESTADO AP√ìS A EXCLUS√ÉO:")
        print("=" * 30)
        
        # Verificar se a conta ainda existe
        conta_existe = Conta.objects.filter(id=conta_id).exists()
        print(f"üí≥ Conta ainda existe: {conta_existe}")
        
        # Verificar transa√ß√µes
        transacoes_restantes = Transacao.objects.filter(conta_id=conta_id).count()
        print(f"üìä Transa√ß√µes restantes: {transacoes_restantes}")
        
        # Verificar despesas parceladas
        despesas_restantes = DespesaParcelada.objects.filter(conta_id=conta_id).count()
        print(f"üí≥ Despesas parceladas restantes: {despesas_restantes}")
        
        # Verificar se h√° transa√ß√µes √≥rf√£s (sem conta)
        transacoes_orfas = Transacao.objects.filter(conta__isnull=True).count()
        print(f"üö® Transa√ß√µes √≥rf√£s (sem conta): {transacoes_orfas}")
        
        # 9. An√°lise do impacto
        print("\nüîç AN√ÅLISE DO IMPACTO:")
        print("=" * 30)
        
        if not conta_existe and transacoes_restantes == 0:
            print("‚úÖ COMPORTAMENTO ATUAL: CASCADE")
            print("  ‚Ä¢ A conta foi exclu√≠da")
            print("  ‚Ä¢ Todas as transa√ß√µes foram exclu√≠das automaticamente")
            print("  ‚Ä¢ Todas as despesas parceladas foram exclu√≠das")
            print("  ‚Ä¢ N√£o h√° dados √≥rf√£os")
            print("\n‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS:")
            print("  ‚Ä¢ N√£o h√° valida√ß√£o se a conta tem saldo")
            print("  ‚Ä¢ N√£o h√° valida√ß√£o se a conta tem transa√ß√µes")
            print("  ‚Ä¢ Perda de hist√≥rico financeiro")
            print("  ‚Ä¢ Poss√≠vel inconsist√™ncia nos relat√≥rios")
            print("  ‚Ä¢ N√£o h√° confirma√ß√£o sobre o impacto")
        
        elif conta_existe:
            print("‚ùå ERRO: Conta n√£o foi exclu√≠da quando deveria")
        
        elif transacoes_restantes > 0:
            print("üö® PROBLEMA: Transa√ß√µes √≥rf√£s detectadas")
            print("  ‚Ä¢ Isso pode causar inconsist√™ncias no sistema")
        
        # 10. Recomenda√ß√µes
        print("\nüí° RECOMENDA√á√ïES:")
        print("=" * 30)
        print("1. Adicionar valida√ß√£o antes da exclus√£o:")
        print("   ‚Ä¢ Verificar se a conta tem saldo diferente de zero")
        print("   ‚Ä¢ Verificar se a conta tem transa√ß√µes")
        print("   ‚Ä¢ Verificar se a conta tem despesas parceladas ativas")
        print("\n2. Implementar exclus√£o segura:")
        print("   ‚Ä¢ Permitir exclus√£o apenas de contas vazias")
        print("   ‚Ä¢ Ou transferir transa√ß√µes para outra conta")
        print("   ‚Ä¢ Ou arquivar conta em vez de excluir")
        print("\n3. Melhorar interface:")
        print("   ‚Ä¢ Mostrar aviso sobre o impacto da exclus√£o")
        print("   ‚Ä¢ Exigir confirma√ß√£o dupla")
        print("   ‚Ä¢ Mostrar quantas transa√ß√µes ser√£o perdidas")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

def verificar_validacoes_atuais():
    """
    Verifica as valida√ß√µes atuais no modelo e views
    """
    print("\nüîç VERIFICA√á√ÉO DAS VALIDA√á√ïES ATUAIS:")
    print("=" * 50)
    
    # Verificar modelo Conta
    print("üìã Modelo Conta:")
    print("  ‚Ä¢ clean(): Sem valida√ß√µes (pass)")
    print("  ‚Ä¢ save(): Sem valida√ß√µes restritivas")
    print("  ‚Ä¢ delete(): Usa comportamento padr√£o do Django")
    
    # Verificar view excluir_conta
    print("\nüåê View excluir_conta:")
    print("  ‚Ä¢ N√£o verifica saldo da conta")
    print("  ‚Ä¢ N√£o verifica exist√™ncia de transa√ß√µes")
    print("  ‚Ä¢ N√£o verifica despesas parceladas")
    print("  ‚Ä¢ N√£o mostra impacto da exclus√£o")
    print("  ‚Ä¢ Apenas pede confirma√ß√£o simples")
    
    # Verificar relacionamentos CASCADE
    print("\nüîó Relacionamentos CASCADE:")
    print("  ‚Ä¢ Transacao.conta: CASCADE (linha 369)")
    print("  ‚Ä¢ DespesaParcelada.conta: CASCADE (linha 433)")
    print("  ‚Ä¢ FechamentoMensal.conta: CASCADE (linha 657)")
    
    print("\n‚ö†Ô∏è  CONCLUS√ÉO:")
    print("O sistema atualmente permite exclus√£o de contas sem valida√ß√µes,")
    print("causando perda de dados hist√≥ricos importantes.")

if __name__ == '__main__':
    verificar_validacoes_atuais()
    print("\n" + "=" * 60)
    test_exclusao_conta_com_transacoes()