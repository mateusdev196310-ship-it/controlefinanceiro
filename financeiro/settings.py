"""
Django settings for financeiro project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Gerar uma nova chave secreta longa e aleatória para produção
SECRET_KEY = config('SECRET_KEY', default='django-insecure-q3i&$4h-)gesath0@4oo660!y3=or_8ss_w0j%#l211^5tz+7-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Garantir que a chave secreta seja forte em produção
if not DEBUG and SECRET_KEY.startswith('django-insecure-'):
    import secrets
    print("AVISO: Usando uma chave secreta insegura em produção. Gere uma nova chave e configure-a como variável de ambiente.")
    # Gerar uma chave forte como fallback (mas ainda é melhor configurar via variável de ambiente)
    SECRET_KEY = ''.join(secrets.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*(-_=+)') for i in range(50))

# Configuração para logs detalhados em produção
DEBUG_PROPAGATE_EXCEPTIONS = config('DEBUG_PROPAGATE_EXCEPTIONS', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost,controlefinanceiro-aio3.onrender.com').split(',')

# Configurações de segurança para produção
CSRF_TRUSTED_ORIGINS = [
    'https://controlefinanceiro-aio3.onrender.com',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

# Configurações adicionais de segurança
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=not DEBUG, cast=bool)
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=not DEBUG, cast=bool)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=not DEBUG, cast=bool)
SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=31536000, cast=int)  # 1 ano
SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True, cast=bool)
SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=True, cast=bool)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'financas',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'financas.middleware.ResourceMonitorMiddleware',
    'financas.middleware.TenantMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'financeiro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'financas.context_processors.company_info',
                'financas.context_processors.system_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'financeiro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração do banco de dados
# Conversão robusta para boolean - strings "False", "false", "0" são False
def str_to_bool(value):
    if isinstance(value, bool):
        return value
    if isinstance(value, str):
        return value.lower() in ('true', '1', 'yes', 'on')
    return bool(value)

USE_SQLITE_RAW = config('USE_SQLITE', default='False')
USE_SQLITE_FLAG = str_to_bool(USE_SQLITE_RAW)
DATABASE_URL = config('DATABASE_URL', default=None)

print(f"[SETTINGS] USE_SQLITE_RAW: '{USE_SQLITE_RAW}' (tipo: {type(USE_SQLITE_RAW).__name__})")
print(f"[SETTINGS] USE_SQLITE_FLAG: {USE_SQLITE_FLAG} (tipo: {type(USE_SQLITE_FLAG).__name__})")
print(f"[SETTINGS] DATABASE_URL: {DATABASE_URL}")

# Forçar SQLite se USE_SQLITE for True, independentemente de DATABASE_URL
if USE_SQLITE_FLAG:
    print("[SETTINGS] FORÇANDO SQLite (USE_SQLITE=True) - Ignorando DATABASE_URL")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Só usar PostgreSQL se USE_SQLITE for False E DATABASE_URL existir e não for vazia
elif DATABASE_URL and DATABASE_URL.strip():
    print(f"[SETTINGS] Usando PostgreSQL com DATABASE_URL: {DATABASE_URL[:50]}...")
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    print("[SETTINGS] Usando SQLite como fallback (DATABASE_URL vazia ou não definida)")
    # Fallback para SQLite se DATABASE_URL não estiver definida ou estiver vazia
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Configuração de ADMINS para receber emails de erro
ADMINS = [
    ('Admin', config('ADMIN_EMAIL', default='admin@localhost')),
]

# Configuração de logging detalhado
import sys

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} [{name}:{lineno}] {message}',
            'style': '{',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django_errors.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'financas': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS removido para produção - apenas arquivos estáticos dos apps

# Whitenoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Configurações de cache para melhorar o desempenho
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Configurações para otimizar o desempenho
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
DATABASE_STATEMENT_TIMEOUT = 30000  # 30 segundos
DATABASE_CONN_MAX_AGE = 600  # 10 minutos

# Configurações de timeout para evitar SIGKILL no Render
MAX_REQUEST_TIME = 60  # Tempo máximo de processamento em segundos para requisições normais
IMPORT_TIMEOUT = 120  # Tempo máximo para importações de transações

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração de Logging Estruturado - DESABILITADO PARA RESOLVER ERRO 400
# from financas.logging_config import LOGGING_CONFIG as LOGGING

# Configurações de Performance para Logging - DESABILITADO
# LOGGING_PERFORMANCE = {
#     'SLOW_QUERY_THRESHOLD_MS': 100,  # Log queries que demoram mais que 100ms
#     'HIGH_QUERY_COUNT_THRESHOLD': 10,  # Log requests com mais de 10 queries
#     'LOG_ALL_QUERIES': False,  # Set True para log de todas as queries (desenvolvimento)
# }

# Configurações de Autenticação
# Configuração do modelo de usuário customizado
AUTH_USER_MODEL = 'financas.CustomUser'
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configurações de Email
# Para desenvolvimento: use console backend
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Para produção: use SMTP backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = f'Sistema Financeiro <{config("EMAIL_HOST_USER", default="noreply@localhost")}>'

# Configurações de Multi-Tenancy
TENANT_MODEL = 'financas.Tenant'
TENANT_DOMAIN_MODEL = 'financas.TenantDomain'

# Configurações de Validação de Email
EMAIL_VERIFICATION_REQUIRED = True
EMAIL_VERIFICATION_TOKEN_EXPIRY_HOURS = 24
